// src/app/api/stats/route.ts
import { NextRequest, NextResponse } from 'next/server';
import Redis from 'ioredis';

export const dynamic = 'force-dynamic';

let redis: Redis | null = null;

// ================================================================================
// INTERFACES AND TYPES
// ================================================================================

interface AllDataResponse {
  listen_counts: Record<string, number>;
  browsers: Record<string, number>;
  os: Record<string, number>;
  devices: Record<string, number>;
  countries: Record<string, number>;
  diagnostic_logs: any[];
  events: Record<string, Record<string, number>>;
  _debug_info: {
    raw_listen_count_keys: string[];
    raw_diagnostic_logs: string[];
  };
}

interface TrackStats {
  total_plays: number;
  albums: Record<string, {
    total_plays: number;
    tracks: Array<{
      title: string;
      plays: number;
      events: Record<string, number>;
    }>;
  }>;
}

interface StatsAPIResponse {
  success: boolean;
  track_stats: Record<string, TrackStats>;
  audience_stats: {
    browsers: Record<string, number>;
    os: Record<string, number>;
    devices: Record<string, number>;
    countries: Record<string, number>;
  };
  diagnostic_logs: any[];
  _debug_info: {
    raw_listen_count_keys: string[];
    raw_diagnostic_logs: string[];
    processing_time?: number;
  };
}

// ================================================================================
// UTILITY FUNCTIONS
// ================================================================================

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è sanitizePath —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 */
function sanitizePath(path: string): string {
  if (!path || typeof path !== 'string') {
    return '';
  }

  let sanitized = path;
  
  // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π leading slash
  if (sanitized.startsWith('/')) {
    sanitized = sanitized.substring(1);
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π URL, –∏–∑–≤–ª–µ–∫–∞–µ–º path
  try {
    if (sanitized.startsWith('http')) {
      const url = new URL(path);
      sanitized = url.pathname.substring(1); // —É–±–∏—Ä–∞–µ–º leading slash
    }
  } catch (error) {
    console.warn(`Invalid URL format: ${path}`);
    return '';
  }

  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
  try {
    sanitized = decodeURIComponent(sanitized);
  } catch (error) {
    console.warn(`Failed to decode URI: ${sanitized}`);
  }

  return sanitized;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—É—Ç–∏ —Ç—Ä–µ–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 */
function parseTrackPath(fullUrl: string): {
  artistName: string;
  albumName: string;
  trackName: string;
} | null {
  try {
    const path = sanitizePath(fullUrl);
    const parts = path.split('/');
    
    if (parts.length !== 4 || parts[0] !== 'music') {
      console.warn(`Invalid track URL structure: '${fullUrl}' | Expected: music/artist/album/track.mp3 | Got parts:`, parts);
      return null;
    }

    const [, artistName, albumRaw, trackFile] = parts;
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞
    const albumName = albumRaw
      .replace(/^(Album|EP|Demo)\.\s*/i, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
      .replace(/^\d{4}[\s\-_]*/, '') // –£–±–∏—Ä–∞–µ–º –≥–æ–¥
      .trim() || 'Unknown Album';
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    const trackNameWithExt = trackFile.replace(/^\d{1,2}[\s.\-_]*/, ''); // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞
    const trackName = trackNameWithExt
      .replace(/\.[^.]+$/, '') // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      .replace(/[\[\(].*?[\]\)]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö
      .trim() || 'Unknown Track';

    return {
      artistName: artistName.trim(),
      albumName,
      trackName
    };
  } catch (error) {
    console.error(`Error parsing track path '${fullUrl}':`, error);
    return null;
  }
}

// ================================================================================
// REDIS CLIENT MANAGEMENT
// ================================================================================

const getRedisClient = (): Redis | null => {
  if (!redis && process.env.REDIS_URL) {
    try {
      const redisUrl = process.env.REDIS_URL;
      if (!redisUrl) {
        throw new Error('REDIS_URL environment variable is not defined');
      }

      redis = new Redis(redisUrl, {
        lazyConnect: true,
        maxRetriesPerRequest: 3,
        connectTimeout: 10000,
        enableReadyCheck: false,
        // maxLoadingTimeout: 1000, ‚ùå –£–ë–†–ê–¢–¨ - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        commandTimeout: 5000,
        retryStrategy: (times) => {
          const delay = Math.min(times * 50, 2000);
          return delay;
        }
      });

      redis.on('error', (error) => {
        console.error('‚ùå Redis connection error:', error);
      });

      redis.on('connect', () => {
        console.log('‚úÖ Connected to Redis for stats');
      });

      redis.on('reconnecting', () => {
        console.log('üîÑ Reconnecting to Redis...');
      });

    } catch (error) {
      console.error('üí• Failed to create Redis client:', error);
      redis = null;
    }
  }
  return redis;
};



// ================================================================================
// AUTHORIZATION
// ================================================================================

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function authorize(request: NextRequest): boolean {
  const expectedToken = process.env.ANALYTICS_TOKEN || process.env.STATS_API_SECRET;
  
  if (!expectedToken) {
    console.error('‚ö†Ô∏è ANALYTICS_TOKEN/STATS_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    return false;
  }

  const authHeader = request.headers.get('authorization') || '';
  
  if (!authHeader.startsWith('Bearer ')) {
    console.warn('‚ö†Ô∏è Missing or invalid Authorization header format');
    return false;
  }

  const token = authHeader.split(' ')[1];
  const isValid = token === expectedToken;
  
  if (!isValid) {
    console.warn('‚ö†Ô∏è Invalid authentication token provided');
  }
  
  return isValid;
}

// ================================================================================
// DATA PROCESSING FUNCTIONS
// ================================================================================

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–∞
 */
function convertToNumbers(obj: Record<string, string> | null | undefined): Record<string, number> {
  if (!obj || typeof obj !== 'object') {
    return {};
  }

  const result: Record<string, number> = {};
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'string') {
      const num = parseInt(value, 10);
      result[key] = isNaN(num) ? 0 : num;
    } else {
      result[key] = 0;
    }
  }
  return result;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function fetchAllData(redisClient: Redis): Promise<AllDataResponse> {
  const pipe = redisClient.pipeline();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  pipe.hgetall('v2:listen_counts');
  pipe.hgetall('v2:stats:browsers');
  pipe.hgetall('v2:stats:os');
  pipe.hgetall('v2:stats:devices');
  pipe.hgetall('v2:stats:countries');
  pipe.hgetall('v2:diagnostic_logs');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–±—ã—Ç–∏–π
  let eventKeys: string[] = [];
  try {
    eventKeys = await redisClient.keys('v2:events:*');
    console.log(`üìä Found ${eventKeys.length} event keys`);
  } catch (error) {
    console.warn('‚ö†Ô∏è Failed to fetch event keys:', error);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
  if (eventKeys.length > 0) {
    for (const key of eventKeys) {
      pipe.hgetall(key);
    }
  }
  
  const results = await pipe.exec();
  
  if (!results) {
    throw new Error('Redis pipeline execution failed');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const rawLogs = (results[5]?.[1] as Record<string, string>) || {};
  const diagnosticLogs: any[] = [];
  
  for (const [logKey, logJson] of Object.entries(rawLogs)) {
    if (!logJson || typeof logJson !== 'string') continue;
    
    try {
      const record = JSON.parse(logJson);
      if (record && typeof record === 'object' && record.timestamp) {
        diagnosticLogs.push({
          ...record,
          _key: logKey // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        });
      }
    } catch (error) {
      console.warn(`Invalid JSON in diagnostic log ${logKey}:`, error);
      continue;
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  const sortedLogs = diagnosticLogs.sort((a, b) => {
    try {
      const timeA = new Date(a.timestamp).getTime();
      const timeB = new Date(b.timestamp).getTime();
      return timeB - timeA;
    } catch (error) {
      return 0;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const eventData: Record<string, Record<string, number>> = {};
  if (eventKeys.length > 0) {
    const eventResults = results.slice(6);
    for (let i = 0; i < eventKeys.length; i++) {
      const eventResult = eventResults[i];
      if (eventResult && eventResult[0] === null && eventResult[1]) {
        const eventCounts = convertToNumbers(eventResult[1] as Record<string, string>);
        if (Object.keys(eventCounts).length > 0) {
          eventData[eventKeys[i]] = eventCounts;
        }
      }
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  return {
    listen_counts: convertToNumbers(results[0]?.[1] as Record<string, string>),
    browsers: convertToNumbers(results[1]?.[1] as Record<string, string>),
    os: convertToNumbers(results[2]?.[1] as Record<string, string>),
    devices: convertToNumbers(results[3]?.[1] as Record<string, string>),
    countries: convertToNumbers(results[4]?.[1] as Record<string, string>),
    diagnostic_logs: sortedLogs.slice(0, 100), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    events: eventData,
    _debug_info: {
      raw_listen_count_keys: Object.keys(results[0]?.[1] as Record<string, string> || {}),
      raw_diagnostic_logs: Object.keys(rawLogs).slice(0, 5)
    }
  };
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–∫–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 */
function processTrackStats(
  listenCounts: Record<string, number>, 
  allEvents: Record<string, Record<string, number>>
): Record<string, TrackStats> {
  const groupedStats: Record<string, TrackStats> = {};
  let processedCount = 0;
  let skippedCount = 0;

  for (const [fullUrl, plays] of Object.entries(listenCounts)) {
    if (!fullUrl || typeof plays !== 'number' || plays <= 0) {
      skippedCount++;
      continue;
    }

    const trackInfo = parseTrackPath(fullUrl);
    if (!trackInfo) {
      skippedCount++;
      continue;
    }

    const { artistName, albumName, trackName } = trackInfo;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞
    const eventKey = `v2:events:${fullUrl}`;
    const eventDetails = allEvents[eventKey] || {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞
    if (!groupedStats[artistName]) {
      groupedStats[artistName] = {
        total_plays: 0,
        albums: {}
      };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª—å–±–æ–º–∞
    if (!groupedStats[artistName].albums[albumName]) {
      groupedStats[artistName].albums[albumName] = {
        total_plays: 0,
        tracks: []
      };
    }

    // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const artistStats = groupedStats[artistName];
    const albumStats = artistStats.albums[albumName];
    
    artistStats.total_plays += plays;
    albumStats.total_plays += plays;
    albumStats.tracks.push({
      title: trackName,
      plays: plays,
      events: eventDetails
    });

    processedCount++;
  }

  console.log(`üìä Track stats processing: ${processedCount} processed, ${skippedCount} skipped`);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –≤ –∫–∞–∂–¥–æ–º –∞–ª—å–±–æ–º–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
  for (const artistStats of Object.values(groupedStats)) {
    for (const albumStats of Object.values(artistStats.albums)) {
      albumStats.tracks.sort((a, b) => b.plays - a.plays);
    }
  }
  
  return groupedStats;
}

// ================================================================================
// MAIN API ROUTE
// ================================================================================

export async function GET(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    console.log('üìä Stats API request started');

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (!authorize(request)) {
      return NextResponse.json(
        { 
          success: false,
          error: 'Unauthorized access. Valid token required.' 
        },
        { status: 401 }
      );
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    const redisClient = getRedisClient();
    if (!redisClient) {
      console.error('‚ùå Redis client not available');
      return NextResponse.json(
        { 
          success: false,
          error: 'Database configuration is missing. Please check Redis connection.' 
        },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
    try {
      await redisClient.ping();
      console.log('‚úÖ Redis connection verified');
    } catch (error) {
      console.error('‚ùå Redis ping failed:', error);
      return NextResponse.json(
        { 
          success: false,
          error: 'Database connection failed.' 
        },
        { status: 503 }
      );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç Fetching data from Redis...');
    const allData = await fetchAllData(redisClient);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–∫–∞–º
    console.log('üîÑ Processing track statistics...');
    const trackStats = processTrackStats(allData.listen_counts, allData.events);
    
    const processingTime = Date.now() - startTime;
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const finalResponse: StatsAPIResponse = {
      success: true,
      track_stats: trackStats,
      audience_stats: {
        browsers: allData.browsers,
        os: allData.os,
        devices: allData.devices,
        countries: allData.countries,
      },
      diagnostic_logs: allData.diagnostic_logs,
      _debug_info: {
        ...allData._debug_info,
        processing_time: processingTime
      }
    };

    console.log(`‚úÖ Stats API completed in ${processingTime}ms`);
    console.log(`üìà Summary: ${Object.keys(trackStats).length} artists, ${allData.diagnostic_logs.length} logs`);
    
    return NextResponse.json(finalResponse, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Cache-Control': 'private, no-cache',
        'X-Processing-Time': `${processingTime}ms`,
        'X-Artists-Count': Object.keys(trackStats).length.toString(),
      }
    });

  } catch (error: unknown) {
    const processingTime = Date.now() - startTime;
    
    console.error('üí• Critical error in stats handler:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    let errorMessage = 'An internal server error occurred.';
    let statusCode = 500;
    
    if (error instanceof Error) {
      console.error('Error details:', error.message);
      console.error('Stack trace:', error.stack);
      
      if (error.message?.includes('Redis') || error.message?.includes('connect')) {
        errorMessage = 'Database connection failed. Please try again later.';
        statusCode = 503;
      } else if (error.message?.includes('timeout')) {
        errorMessage = 'Request timeout. Please try again.';
        statusCode = 504;
      } else if (error.message?.includes('unauthorized') || error.message?.includes('auth')) {
        errorMessage = 'Authentication failed.';
        statusCode = 401;
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: errorMessage,
        timestamp: new Date().toISOString(),
        processing_time: processingTime
      },
      { 
        status: statusCode,
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'X-Error': 'true',
          'X-Processing-Time': `${processingTime}ms`
        }
      }
    );
  }
}

// ================================================================================
// GRACEFUL SHUTDOWN HANDLERS
// ================================================================================

const gracefulShutdown = () => {
  console.log('üîÑ Graceful shutdown initiated...');
  if (redis) {
    redis.disconnect();
    console.log('‚úÖ Redis connection closed');
  }
};

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  gracefulShutdown();
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
});
