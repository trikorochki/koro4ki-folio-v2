// middleware.ts (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
  if (pathname.startsWith('/music/')) {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
      const decodedPath = decodeURIComponent(pathname);
      const filePath = path.join(process.cwd(), decodedPath);
      
      console.log('üéµ Serving music file:', filePath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º directory traversal)
      const safePath = path.resolve(process.cwd(), decodedPath.substring(1));
      const musicDir = path.resolve(process.cwd(), 'music');
      
      if (!safePath.startsWith(musicDir)) {
        console.warn('‚ö†Ô∏è Attempted directory traversal:', decodedPath);
        return new NextResponse('Access denied', { 
          status: 403,
          headers: { 'Content-Type': 'text/plain' }
        });
      }
      
      if (fs.existsSync(safePath)) {
        const stat = fs.statSync(safePath);
        
        if (stat.isFile()) {
          const fileBuffer = fs.readFileSync(safePath);
          const extension = path.extname(safePath).toLowerCase();
          
          let contentType = 'application/octet-stream';
          let cacheControl = 'public, max-age=31536000'; // 1 –≥–æ–¥ –¥–ª—è –∞—É–¥–∏–æ
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
          switch (extension) {
            case '.mp3':
              contentType = 'audio/mpeg';
              break;
            case '.wav':
              contentType = 'audio/wav';
              break;
            case '.flac':
              contentType = 'audio/flac';
              break;
            case '.m4a':
            case '.aac':
              contentType = 'audio/mp4';
              break;
            case '.ogg':
              contentType = 'audio/ogg';
              break;
            case '.jpg':
            case '.jpeg':
              contentType = 'image/jpeg';
              cacheControl = 'public, max-age=86400'; // 1 –¥–µ–Ω—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
              break;
            case '.png':
              contentType = 'image/png';
              cacheControl = 'public, max-age=86400';
              break;
            case '.webp':
              contentType = 'image/webp';
              cacheControl = 'public, max-age=86400';
              break;
            default:
              contentType = 'application/octet-stream';
              cacheControl = 'public, max-age=3600'; // 1 —á–∞—Å –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
          }
          
          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Range requests –¥–ª—è –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
          const range = request.headers.get('range');
          
          if (range && contentType.startsWith('audio/')) {
            const parts = range.replace(/bytes=/, "").split("-");
            const start = parseInt(parts[0], 10);
            const end = parts[1] ? parseInt(parts[1], 10) : fileBuffer.length - 1;
            const chunksize = (end - start) + 1;
            const chunk = fileBuffer.slice(start, end + 1);
            
            return new NextResponse(chunk, {
              status: 206, // Partial Content
              headers: {
                'Content-Range': `bytes ${start}-${end}/${fileBuffer.length}`,
                'Accept-Ranges': 'bytes',
                'Content-Length': chunksize.toString(),
                'Content-Type': contentType,
                'Cache-Control': cacheControl,
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Range',
                'Cross-Origin-Resource-Policy': 'cross-origin',
              },
            });
          }
          
          console.log(`‚úÖ Serving ${extension} file: ${path.basename(safePath)} (${fileBuffer.length} bytes)`);
          
          return new NextResponse(fileBuffer, {
            headers: {
              'Content-Type': contentType,
              'Cache-Control': cacheControl,
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Range',
              'Accept-Ranges': 'bytes',
              'Content-Length': fileBuffer.length.toString(),
              'Cross-Origin-Resource-Policy': 'cross-origin',
              'X-Content-Type-Options': 'nosniff',
            },
          });
        } else {
          console.log('üìÅ Path is directory, not file:', safePath);
        }
      } else {
        console.log('‚ùå File not found:', safePath);
      }
      
    } catch (error) {
      console.error('üí• Error serving music file:', error);
      
      return new NextResponse('Internal server error', { 
        status: 500,
        headers: { 'Content-Type': 'text/plain' }
      });
    }
    
    return new NextResponse('File not found', { 
      status: 404,
      headers: {
        'Content-Type': 'text/plain',
        'Cache-Control': 'no-cache',
      }
    });
  }
  
  return NextResponse.next();
}

export const config = {
  matcher: [
    '/music/:path*',
    // –ò—Å–∫–ª—é—á–∞–µ–º API routes –∏ static —Ñ–∞–π–ª—ã
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
