# upload_album.py - –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞ —Å –æ–±–ª–æ–∂–∫–æ–π

import os
import mimetypes
import dotenv
from vercel_blob import put
from dotenv import load_dotenv
from mutagen.mp3 import MP3
from mutagen.wave import WAVE
from mutagen import MutagenError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv('.env.development.local')

MUSIC_DIR = 'music'

def get_audio_info(file_path):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ
    """
    try:
        if file_path.lower().endswith('.mp3'):
            audio = MP3(file_path)
            return {
                'duration': audio.info.length,
                'bitrate': audio.info.bitrate,
                'title': audio.get('TIT2', ['Unknown'])[0],
                'artist': audio.get('TPE1', ['Unknown'])[0],
                'album': audio.get('TALB', ['Unknown'])[0]
            }
        elif file_path.lower().endswith('.wav'):
            audio = WAVE(file_path)
            return {
                'duration': audio.info.length,
                'bitrate': audio.info.bitrate,
                'title': 'Unknown',
                'artist': 'Unknown',
                'album': 'Unknown'
            }
    except MutagenError:
        pass
    
    return None

def find_album_cover(album_path):
    """
    –ù–∞–π—Ç–∏ —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    """
    cover_names = [
        'cover.jpg', 'cover.jpeg', 'cover.png',
        'Cover.jpg', 'Cover.jpeg', 'Cover.png',
        'folder.jpg', 'folder.jpeg', 'folder.png',
        'album.jpg', 'album.jpeg', 'album.png'
    ]
    
    for cover_name in cover_names:
        cover_path = os.path.join(album_path, cover_name)
        if os.path.exists(cover_path):
            return cover_path, cover_name
    
    return None, None

def upload_album(local_album_path, target_blob_path=None):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –≤ blob —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤–∫–ª—é—á–∞—è –æ–±–ª–æ–∂–∫—É
    """
    print(f"=== –ó–ê–ì–†–£–ó–ö–ê –ê–õ–¨–ë–û–ú–ê ===")
    print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {local_album_path}")
    
    if not os.path.exists(local_album_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ '{local_album_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ò—â–µ–º –æ–±–ª–æ–∂–∫—É –∞–ª—å–±–æ–º–∞
    cover_path, cover_filename = find_album_cover(local_album_path)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    audio_files = []
    cover_file = None
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk(local_album_path):
        for filename in files:
            if filename.startswith('.'):
                continue
            
            if filename.lower().endswith(('.mp3', '.wav', '.flac', '.m4a', '.ogg')):
                local_path = os.path.join(root, filename)
                audio_files.append({
                    'local_path': local_path,
                    'filename': filename,
                    'size': os.path.getsize(local_path),
                    'type': 'audio'
                })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
    if cover_path:
        cover_file = {
            'local_path': cover_path,
            'filename': cover_filename,
            'size': os.path.getsize(cover_path),
            'type': 'cover'
        }
        print(f"üé® –ù–∞–π–¥–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: {cover_filename}")
    else:
        print(f"‚ö†Ô∏è  –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∏—â–µ–º: cover.jpg, cover.png, folder.jpg –∏ –¥—Ä.)")
    
    if not audio_files:
        print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{local_album_path}'")
        return False
    
    print(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    total_size = 0
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞—Ö
    for file in audio_files:
        audio_info = get_audio_info(file['local_path'])
        size_mb = file['size'] / (1024 * 1024)
        total_size += file['size']
        
        print(f"  üìÅ {file['filename']} ({size_mb:.1f} MB)")
        if audio_info:
            duration_min = audio_info['duration'] / 60
            print(f"     üéµ {audio_info['title']} - {audio_info['artist']}")
            print(f"     ‚è±Ô∏è  {duration_min:.1f} –º–∏–Ω, {audio_info['bitrate']} kbps")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–ª–æ–∂–∫–µ
    if cover_file:
        cover_size_mb = cover_file['size'] / (1024 * 1024)
        total_size += cover_file['size']
        print(f"\nüé® –û–±–ª–æ–∂–∫–∞:")
        print(f"  üìÅ {cover_file['filename']} ({cover_size_mb:.1f} MB)")
    
    total_size_mb = total_size / (1024 * 1024)
    total_files = len(audio_files) + (1 if cover_file else 0)
    print(f"\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
    print(f"üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    confirm = input(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å {total_files} —Ñ–∞–π–ª–æ–≤? (y/N): ")
    if confirm.lower() != 'y':
        print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
    uploaded_count = 0
    failed_count = 0
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    for i, file in enumerate(audio_files, 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤ blob
        if target_blob_path:
            blob_path = target_blob_path + '/' + file['filename']
        else:
            blob_path = file['local_path'].replace("\\", "/")
        
        print(f"\n[{i}/{total_files}] –ó–∞–≥—Ä—É–∑–∫–∞: {file['filename']}")
        print(f"  –ü—É—Ç—å –≤ blob: {blob_path}")
        
        try:
            with open(file['local_path'], 'rb') as f:
                file_content = f.read()
                
                content_type, _ = mimetypes.guess_type(file['local_path'])
                if content_type is None:
                    content_type = 'application/octet-stream'

                blob_result = put(blob_path, file_content, options={
                    'content_type': content_type,
                    'allowOverwrite': True
                })
                
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ! URL: {blob_result['url']}")
                uploaded_count += 1
                
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
            failed_count += 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
    if cover_file:
        cover_index = len(audio_files) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤ blob –¥–ª—è –æ–±–ª–æ–∂–∫–∏
        if target_blob_path:
            cover_blob_path = target_blob_path + '/' + cover_file['filename']
        else:
            cover_blob_path = cover_file['local_path'].replace("\\", "/")
        
        print(f"\n[{cover_index}/{total_files}] –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏: {cover_file['filename']}")
        print(f"  –ü—É—Ç—å –≤ blob: {cover_blob_path}")
        
        try:
            with open(cover_file['local_path'], 'rb') as f:
                file_content = f.read()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                content_type, _ = mimetypes.guess_type(cover_file['local_path'])
                if content_type is None:
                    # Fallback –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    if cover_file['filename'].lower().endswith(('.jpg', '.jpeg')):
                        content_type = 'image/jpeg'
                    elif cover_file['filename'].lower().endswith('.png'):
                        content_type = 'image/png'
                    else:
                        content_type = 'image/jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                blob_result = put(cover_blob_path, file_content, options={
                    'content_type': content_type,
                    'allowOverwrite': True
                })
                
                print(f"  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! URL: {blob_result['url']}")
                uploaded_count += 1
                
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            failed_count += 1
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ì–†–£–ó–ö–ò ===")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
    
    if cover_file and uploaded_count > len(audio_files):
        print(f"üé® –û–±–ª–æ–∂–∫–∞ –∞–ª—å–±–æ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    elif cover_file:
        print(f"‚ö†Ô∏è  –û–±–ª–æ–∂–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    if uploaded_count > 0:
        print("=== –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        return True
    else:
        print("=== –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê ===")
        return False

def upload_single_album_folder(album_folder_name, custom_blob_path=None):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –∏–∑ –ø–∞–ø–∫–∏ music/
    """
    local_path = os.path.join(MUSIC_DIR, album_folder_name)
    
    if custom_blob_path:
        blob_path = custom_blob_path
    else:
        blob_path = f"music/{album_folder_name}"
    
    return upload_album(local_path, blob_path)

if __name__ == '__main__':
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –∏–∑ –ø–∞–ø–∫–∏ music/
    upload_single_album_folder("jahkorochki/Album. Deportation from the country of refugees")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
    # upload_album("C:/MyMusic/New Album", "music/artist/new_album")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—É—Ç–µ–º –≤ blob
    # upload_single_album_folder("n√ºkorochki/Album. Grenzg√§nger", "music/corrected_albums/grenzganger")
