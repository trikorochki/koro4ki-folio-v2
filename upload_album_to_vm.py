#!/usr/bin/env python3
# upload_album_to_vm.py - –ü–µ—Ä–µ–∑–∞–ª–∏–≤–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –Ω–∞ VM kr4.pro

import os
import subprocess
import sys
import glob
from pathlib import Path
import argparse
from datetime import datetime


# =================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =================================

# –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º—É–∑—ã–∫–æ–π
LOCAL_MUSIC_DIR = '/Users/evgenyganshin/Projects/koro4ki_folio_2BAK/loc-music'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
VM_SERVER = 'trikorochki@proxy-kr4'
VM_MUSIC_PATH = '/home/trikorochki/dod.kr4/music'

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã
AUDIO_EXTENSIONS = ('.mp3', '.wav', '.flac', '.m4a', '.ogg', '.aac')

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ–±–ª–æ–∂–µ–∫
IMAGE_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.gif', '.webp')


class ColorOutput:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'
    
    @staticmethod
    def print_success(message):
        print(f"{ColorOutput.GREEN}‚úÖ {message}{ColorOutput.END}")
    
    @staticmethod
    def print_error(message):
        print(f"{ColorOutput.RED}‚ùå {message}{ColorOutput.END}")
    
    @staticmethod
    def print_warning(message):
        print(f"{ColorOutput.YELLOW}‚ö†Ô∏è  {message}{ColorOutput.END}")
    
    @staticmethod
    def print_info(message):
        print(f"{ColorOutput.CYAN}‚ÑπÔ∏è  {message}{ColorOutput.END}")
    
    @staticmethod
    def print_header(message):
        print(f"\n{ColorOutput.BOLD}{ColorOutput.BLUE}=== {message} ==={ColorOutput.END}")


def find_artists():
    """–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if not os.path.exists(LOCAL_MUSIC_DIR):
        ColorOutput.print_error(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º—É–∑—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LOCAL_MUSIC_DIR}")
        return []
    
    artists = []
    for item in os.listdir(LOCAL_MUSIC_DIR):
        artist_path = os.path.join(LOCAL_MUSIC_DIR, item)
        if os.path.isdir(artist_path) and not item.startswith('.'):
            artists.append(item)
    
    return sorted(artists)


def find_albums(artist):
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∞–ª—å–±–æ–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    artist_path = os.path.join(LOCAL_MUSIC_DIR, artist)
    
    if not os.path.exists(artist_path):
        return []
    
    albums = []
    for item in os.listdir(artist_path):
        album_path = os.path.join(artist_path, item)
        if os.path.isdir(album_path) and not item.startswith('.'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –∞–ª—å–±–æ–º–µ
            has_audio = any(
                f.lower().endswith(AUDIO_EXTENSIONS) 
                for f in os.listdir(album_path) 
                if os.path.isfile(os.path.join(album_path, f))
            )
            if has_audio:
                albums.append(item)
    
    return sorted(albums)


def get_album_info(artist, album):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ"""
    album_path = os.path.join(LOCAL_MUSIC_DIR, artist, album)
    
    if not os.path.exists(album_path):
        return None
    
    info = {
        'path': album_path,
        'audio_files': [],
        'image_files': [],
        'other_files': [],
        'total_size': 0,
        'cover_found': False
    }
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º–µ
    for root, dirs, files in os.walk(album_path):
        for filename in files:
            if filename.startswith('.'):
                continue
            
            file_path = os.path.join(root, filename)
            file_size = os.path.getsize(file_path)
            info['total_size'] += file_size
            
            file_ext = filename.lower()
            
            if file_ext.endswith(AUDIO_EXTENSIONS):
                info['audio_files'].append({
                    'name': filename,
                    'path': file_path,
                    'size': file_size
                })
            elif file_ext.endswith(IMAGE_EXTENSIONS):
                info['image_files'].append({
                    'name': filename,
                    'path': file_path,
                    'size': file_size
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±–ª–æ–∂–∫–æ–π
                cover_names = ['cover', 'folder', 'album', 'front']
                if any(cover_name in filename.lower() for cover_name in cover_names):
                    info['cover_found'] = True
            else:
                info['other_files'].append({
                    'name': filename,
                    'path': file_path,
                    'size': file_size
                })
    
    return info


def display_album_info(artist, album, info):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ"""
    ColorOutput.print_header(f"–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–õ–¨–ë–û–ú–ï")
    
    print(f"{ColorOutput.BOLD}–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:{ColorOutput.END} {artist}")
    print(f"{ColorOutput.BOLD}–ê–ª—å–±–æ–º:{ColorOutput.END} {album}")
    print(f"{ColorOutput.BOLD}–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å:{ColorOutput.END} {info['path']}")
    
    total_size_mb = info['total_size'] / (1024 * 1024)
    total_files = len(info['audio_files']) + len(info['image_files']) + len(info['other_files'])
    
    print(f"\nüìä {ColorOutput.BOLD}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{ColorOutput.END}")
    print(f"  üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(info['audio_files'])}")
    print(f"  üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(info['image_files'])}")
    print(f"  üìÅ –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(info['other_files'])}")
    print(f"  üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
    print(f"  üé® –û–±–ª–æ–∂–∫–∞: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if info['cover_found'] else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    if info['audio_files']:
        print(f"\nüéµ {ColorOutput.BOLD}–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:{ColorOutput.END}")
        for i, file in enumerate(info['audio_files'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            size_mb = file['size'] / (1024 * 1024)
            print(f"  {i:2}. {file['name']} ({size_mb:.1f} MB)")
        
        if len(info['audio_files']) > 10:
            print(f"     ... –∏ –µ—â–µ {len(info['audio_files']) - 10} —Ñ–∞–π–ª–æ–≤")
    
    if info['image_files']:
        print(f"\nüé® {ColorOutput.BOLD}–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:{ColorOutput.END}")
        for file in info['image_files']:
            size_kb = file['size'] / 1024
            cover_mark = " üéØ" if any(cover_name in file['name'].lower() for cover_name in ['cover', 'folder', 'album']) else ""
            print(f"     {file['name']} ({size_kb:.1f} KB){cover_mark}")


def test_vm_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM"""
    ColorOutput.print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM...")
    
    try:
        result = subprocess.run(
            ['ssh', VM_SERVER, 'echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            ColorOutput.print_success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM: {result.stderr}")
            return False
    
    except subprocess.TimeoutExpired:
        ColorOutput.print_error("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM")
        return False
    except Exception as e:
        ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def create_vm_directory(artist, album):
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ VM –¥–ª—è –∞–ª—å–±–æ–º–∞"""
    vm_album_path = f"{VM_MUSIC_PATH}/{artist}/{album}"
    
    ColorOutput.print_info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ VM: {vm_album_path}")
    
    try:
        result = subprocess.run(
            ['ssh', VM_SERVER, f'mkdir -p "{vm_album_path}"'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            ColorOutput.print_success("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ VM")
            return True
        else:
            ColorOutput.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {result.stderr}")
            return False
    
    except Exception as e:
        ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return False


def upload_album_to_vm(artist, album, info):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –Ω–∞ VM –∏—Å–ø–æ–ª—å–∑—É—è rsync"""
    local_album_path = info['path']
    vm_album_path = f"{VM_MUSIC_PATH}/{artist}/{album}"
    
    ColorOutput.print_header("–ó–ê–ì–†–£–ó–ö–ê –ê–õ–¨–ë–û–ú–ê –ù–ê VM")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É rsync
    rsync_cmd = [
        'rsync',
        '-avz',
        '--progress',
        '--delete',
        '--human-readable',
        f"{local_album_path}/",  # Trailing slash –≤–∞–∂–µ–Ω!
        f"{VM_SERVER}:{vm_album_path}/"
    ]
    
    ColorOutput.print_info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(rsync_cmd)}")
    ColorOutput.print_info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {local_album_path}")
    ColorOutput.print_info(f"–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: {vm_album_path}")
    
    print(f"\n{ColorOutput.YELLOW}üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...{ColorOutput.END}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º rsync —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(
            rsync_cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for line in process.stdout:
            line = line.strip()
            if line:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ rsync
                if 'bytes/sec' in line or 'speedup' in line:
                    print(f"  üìä {line}")
                elif line.endswith('/'):
                    print(f"  üìÅ {line}")
                elif any(ext in line.lower() for ext in AUDIO_EXTENSIONS + IMAGE_EXTENSIONS):
                    print(f"  üì§ {line}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        
        if return_code == 0:
            ColorOutput.print_success("–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ VM!")
            return True
        else:
            ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–æ–¥: {return_code})")
            return False
    
    except Exception as e:
        ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return False


def verify_upload(artist, album, info):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ VM"""
    vm_album_path = f"{VM_MUSIC_PATH}/{artist}/{album}"
    
    ColorOutput.print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ VM...")
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ VM
        result = subprocess.run(
            ['ssh', VM_SERVER, f'find "{vm_album_path}" -type f | wc -l'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            vm_file_count = int(result.stdout.strip())
            local_file_count = len(info['audio_files']) + len(info['image_files']) + len(info['other_files'])
            
            print(f"  üìÅ –§–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ: {local_file_count}")
            print(f"  üìÅ –§–∞–π–ª–æ–≤ –Ω–∞ VM: {vm_file_count}")
            
            if vm_file_count == local_file_count:
                ColorOutput.print_success("–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                return True
            else:
                ColorOutput.print_warning(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return False
        else:
            ColorOutput.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ VM")
            return False
    
    except Exception as e:
        ColorOutput.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def interactive_artist_selection():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    artists = find_artists()
    
    if not artists:
        ColorOutput.print_error("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return None
    
    ColorOutput.print_header("–í–´–ë–û–† –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø")
    
    for i, artist in enumerate(artists, 1):
        print(f"  {i:2}. {artist}")
    
    while True:
        try:
            choice = input(f"\n{ColorOutput.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (1-{len(artists)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è: {ColorOutput.END}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–µ—Ä
            if choice.isdigit():
                idx = int(choice) - 1
                if 0 <= idx < len(artists):
                    return artists[idx]
                else:
                    ColorOutput.print_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(artists)}")
                    continue
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∏–º—è
            if choice in artists:
                return choice
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ –∏–º—è
            matches = [artist for artist in artists if choice.lower() in artist.lower()]
            if len(matches) == 1:
                ColorOutput.print_info(f"–ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {matches[0]}")
                return matches[0]
            elif len(matches) > 1:
                ColorOutput.print_warning("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for match in matches:
                    print(f"  ‚Ä¢ {match}")
                continue
            
            ColorOutput.print_error("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        except KeyboardInterrupt:
            print("\n\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return None


def interactive_album_selection(artist):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª—å–±–æ–º–∞"""
    albums = find_albums(artist)
    
    if not albums:
        ColorOutput.print_error(f"–ê–ª—å–±–æ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {artist}")
        return None
    
    ColorOutput.print_header(f"–í–´–ë–û–† –ê–õ–¨–ë–û–ú–ê –î–õ–Ø {artist}")
    
    for i, album in enumerate(albums, 1):
        print(f"  {i:2}. {album}")
    
    while True:
        try:
            choice = input(f"\n{ColorOutput.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º (1-{len(albums)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {ColorOutput.END}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–µ—Ä
            if choice.isdigit():
                idx = int(choice) - 1
                if 0 <= idx < len(albums):
                    return albums[idx]
                else:
                    ColorOutput.print_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(albums)}")
                    continue
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if choice in albums:
                return choice
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            matches = [album for album in albums if choice.lower() in album.lower()]
            if len(matches) == 1:
                ColorOutput.print_info(f"–ù–∞–π–¥–µ–Ω –∞–ª—å–±–æ–º: {matches[0]}")
                return matches[0]
            elif len(matches) > 1:
                ColorOutput.print_warning("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for match in matches:
                    print(f"  ‚Ä¢ {match}")
                continue
            
            ColorOutput.print_error("–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        except KeyboardInterrupt:
            print("\n\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –Ω–∞ VM kr4.pro')
    parser.add_argument('--artist', '-a', help='–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
    parser.add_argument('--album', '-l', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞')
    parser.add_argument('--list-artists', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π')
    parser.add_argument('--list-albums', help='–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å–±–æ–º—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.list_artists:
        artists = find_artists()
        ColorOutput.print_header("–î–û–°–¢–£–ü–ù–´–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò")
        for artist in artists:
            print(f"  ‚Ä¢ {artist}")
        return
    
    if args.list_albums:
        albums = find_albums(args.list_albums)
        ColorOutput.print_header(f"–ê–õ–¨–ë–û–ú–´ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø: {args.list_albums}")
        for album in albums:
            print(f"  ‚Ä¢ {album}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if not os.path.exists(LOCAL_MUSIC_DIR):
        ColorOutput.print_error(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º—É–∑—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LOCAL_MUSIC_DIR}")
        ColorOutput.print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π LOCAL_MUSIC_DIR")
        return
    
    ColorOutput.print_header("–ó–ê–ì–†–£–ó–ß–ò–ö –ê–õ–¨–ë–û–ú–û–í –ù–ê VM kr4.pro")
    print(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {LOCAL_MUSIC_DIR}")
    print(f"–°–µ—Ä–≤–µ—Ä: {VM_SERVER}")
    print(f"–£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {VM_MUSIC_PATH}")
    
    # –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if args.artist:
        artist = args.artist
        if not os.path.exists(os.path.join(LOCAL_MUSIC_DIR, artist)):
            ColorOutput.print_error(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å '{artist}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    else:
        artist = interactive_artist_selection()
        if not artist:
            return
    
    # –í—ã–±–æ—Ä –∞–ª—å–±–æ–º–∞
    if args.album:
        album = args.album
        if not os.path.exists(os.path.join(LOCAL_MUSIC_DIR, artist, album)):
            ColorOutput.print_error(f"–ê–ª—å–±–æ–º '{album}' –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
            return
    else:
        album = interactive_album_selection(artist)
        if not album:
            return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª—å–±–æ–º–µ
    info = get_album_info(artist, album)
    if not info:
        ColorOutput.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ")
        return
    
    if not info['audio_files']:
        ColorOutput.print_error("–í –∞–ª—å–±–æ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    display_album_info(artist, album, info)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    print(f"\n{ColorOutput.YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ê–ª—å–±–æ–º –±—É–¥–µ—Ç –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ó–ê–ü–ò–°–ê–ù –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!{ColorOutput.END}")
    confirm = input(f"\n{ColorOutput.BOLD}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? (y/N): {ColorOutput.END}")
    
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        ColorOutput.print_warning("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM
    if not test_vm_connection():
        ColorOutput.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ VM
    if not create_vm_directory(artist, album):
        ColorOutput.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ VM")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–∞
    if upload_album_to_vm(artist, album, info):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        verify_upload(artist, album, info)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ColorOutput.print_header("–ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        ColorOutput.print_success(f"–ê–ª—å–±–æ–º '{album}' –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"üåê URL: https://dod.kr4.pro/music/{artist}/{album}/")
        
        # –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {current_time}")
    else:
        ColorOutput.print_error("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        ColorOutput.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
